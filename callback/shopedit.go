package callback

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"tbViT/database"
	"tbViT/features"
)

func handleShopEdit(bot *tgbotapi.BotAPI, db *sql.DB, cq *tgbotapi.CallbackQuery, shopState map[int64]*CorrectionState) {
	data := cq.Data
	fromID := cq.From.ID

	switch {
	case data == "shop_edit" && accessLevel == "admin":
		features.ShowShopEdit(bot, fromID)
	case data == "shop_edit:choose" && accessLevel == "admin":
		rows, _ := db.Query(`SELECT id, product, price, remains FROM shop WHERE rest_number=(
			SELECT rest_number FROM users WHERE telegram_id=?)`, fromID)
		var keyboardRows [][]tgbotapi.InlineKeyboardButton
		var hasItems bool
		for rows.Next() {
			hasItems = true
			var id, price, remains int
			var name string
			rows.Scan(&id, &name, &price, &remains)
			btn := tgbotapi.NewInlineKeyboardButtonData(
				fmt.Sprintf("%s (%düåü, %d —à—Ç.)", name, price, remains),
				fmt.Sprintf("shop_edititem:%d", id),
			)
			keyboardRows = append(keyboardRows, tgbotapi.NewInlineKeyboardRow(btn))
		}
		if !hasItems {
			bot.Send(tgbotapi.NewMessage(fromID, "–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."))
			return
		}
		msg := tgbotapi.NewMessage(fromID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(keyboardRows...)
		bot.Send(msg)

	case strings.HasPrefix(data, "shop_edititem:"):
		id, _ := strconv.Atoi(strings.TrimPrefix(data, "shop_edititem:"))
		shopState[fromID] = &CorrectionState{ID: int64(id), Field: "edit_menu"}
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞
		btns := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üí≤ –¶–µ–Ω–∞", fmt.Sprintf("shop_editfield:price:%d", id)),
				tgbotapi.NewInlineKeyboardButtonData("üì¶ –û—Å—Ç–∞—Ç–æ–∫", fmt.Sprintf("shop_editfield:remains:%d", id)),
				tgbotapi.NewInlineKeyboardButtonData("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", fmt.Sprintf("shop_editdel:%d", id)),
			),
		)
		msg := tgbotapi.NewMessage(fromID, "–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?")
		msg.ReplyMarkup = btns
		bot.Send(msg)

	case strings.HasPrefix(data, "shop_editfield:"):
		parts := strings.Split(data, ":")
		if len(parts) != 3 {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è"))
			return
		}
		field, sid := parts[1], parts[2]
		id, _ := strconv.Atoi(sid)
		shopState[fromID] = &CorrectionState{ID: int64(id), Field: "wait_new_" + field}
		_, _, name, _, _ := database.GetPriceRemainsProductName(db, id)
		var msg string
		switch field {
		case "price":
			msg = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞(%s):", name)
		case "remains":
			msg = fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞(%s):", name)
		}
		bot.Send(tgbotapi.NewMessage(fromID, msg))

	case strings.HasPrefix(data, "shop_editdel:"):
		id, err := strconv.Atoi(strings.TrimPrefix(data, "shop_editdel:"))
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –±–ª–æ–∫–µ (shop_editdel)", err)
		}
		err = database.DeleteProduct(db, id)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %w", err)
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"))
		} else {
			bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω"))
		}
		delete(shopState, fromID)

	case data == "shop_edit:shop_add":
		shopState[fromID] = &CorrectionState{Field: "wait_new_product_name"}
		bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:"))
	}
}

func HandleShopMessage(bot *tgbotapi.BotAPI, db *sql.DB, msg *tgbotapi.Message, shopState map[int64]*CorrectionState) {
	fromID := msg.From.ID
	st, ok := shopState[fromID]
	if !ok {
		return
	}

	switch st.Field {
	// --- —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
	case "wait_new_price":
		price, err := strconv.Atoi(msg.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!‚õîÔ∏è"))
			return
		}
		if price < 0 {
			bot.Send(tgbotapi.NewMessage(fromID, "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!‚õîÔ∏è"))
			return
		}

		_, err = db.Exec("UPDATE shop SET price=? WHERE id=?", price, st.ID)
		if err == nil {
			bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!"))
		} else {
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"))
		}
		delete(shopState, fromID)

	case "wait_new_remains":
		remains, err := strconv.Atoi(msg.Text)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ remains:", err)
			bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!"))
			return
		}
		_, err = db.Exec("UPDATE shop SET remains=? WHERE id=?", remains, st.ID)
		if err == nil {
			log.Println("–û—à–∏–±–∫–∞ UPDATE remains:", err)
			bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω!"))
		} else {
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å"))
		}
		delete(shopState, fromID)

	// --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
	case "wait_new_product_name":
		st.Value = msg.Text
		st.Field = "wait_new_product_price"
		shopState[fromID] = st
		bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:"))

	case "wait_new_product_price":
		price, err := strconv.Atoi(msg.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!‚õîÔ∏è"))
			return
		}
		if price < 0 {
			bot.Send(tgbotapi.NewMessage(fromID, "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!‚õîÔ∏è"))
			return
		}
		st.Field = "wait_new_product_remains"
		st.Value = fmt.Sprintf("%s|%d", st.Value, price)
		shopState[fromID] = st
		bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:"))

	case "wait_new_product_remains":
		remains, err := strconv.Atoi(msg.Text)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!"))
			return
		}
		// value = "–Ω–∞–∑–≤–∞–Ω–∏–µ|—Ü–µ–Ω–∞"
		parts := strings.Split(st.Value, "|")
		name := parts[0]
		restNum, err := database.GetUserRestID(db, fromID)
		if err != nil {
			log.Println("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞", err)
		}
		price, _ := strconv.Atoi(parts[1])
		_, err = db.Exec("INSERT INTO shop (product, price, remains, rest_number) VALUES (?, ?, ?, ?)",
			name, price, remains, restNum)
		if err == nil {
			bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!"))
		} else {
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"))
		}
		delete(shopState, fromID)
	}
}
