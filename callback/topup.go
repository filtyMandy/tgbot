package callback

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"tbViT/database" // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
)

// handleTopUpCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –±–∞–ª–∞–Ω—Å–∞.
// –û–Ω –ø–∞—Ä—Å–∏—Ç callback-–¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ (–≤—ã–±–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –≤—ã–±–æ—Ä —Å—É–º–º—ã)
// –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é, –Ω–∞–ø—Ä—è–º—É—é –∏—Å–ø–æ–ª—å–∑—É—è ID –∏–∑ callback-–¥–∞–Ω–Ω—ã—Ö.
func handleTopUpCallback(
	bot *tgbotapi.BotAPI,
	db *sql.DB,
	fromID int64, // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª callback (–º–µ–Ω–µ–¥–∂–µ—Ä/–∞–¥–º–∏–Ω)
	data string, // callback_data
	callback *tgbotapi.CallbackQuery, // –æ–±—ä–µ–∫—Ç callback-query
	// accessLevel string,    // –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —Ä–∞–Ω—å—à–µ, –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω
) {
	switch {
	// --- –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
	case data == "topup_":
		dep, err := database.GetUserDep(db, fromID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è."))
			return
		}
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤. status "topup_select_worker" - —ç—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback'–æ–≤ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞.
		err = database.SendWorkersList(bot, db, fromID, "topup_select_worker", dep, 0)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."))
		}
		answerCallback(bot, callback.ID, "")
		return

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ---
	case strings.HasPrefix(data, "topup_amount:"):
		// –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: "topup_amount:—Å—É–º–º–∞:workerID"
		parts := strings.Split(data, ":")
		if len(parts) != 3 {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."))
			answerCallback(bot, callback.ID, "")
			return
		}

		amountStr := parts[1]
		workerIDStr := parts[2]

		amount, err := strconv.Atoi(amountStr)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."))
			answerCallback(bot, callback.ID, "")
			return
		}

		workerID, err := strconv.ParseInt(workerIDStr, 10, 64)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞."))
			answerCallback(bot, callback.ID, "")
			return
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ workerID –≤–∞–ª–∏–¥–µ–Ω
		if workerID <= 0 {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω –∏–ª–∏ ID –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω."))
			answerCallback(bot, callback.ID, "")
			return
		}

		// –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
		msg, isSuccess, err := database.TopUpBalance(db, workerID, amount)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ TopUpBalance –¥–ª—è workerID %d: %v", workerID, err)
			bot.Send(tgbotapi.NewMessage(fromID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞."))
			answerCallback(bot, callback.ID, "")
			return
		}

		bot.Send(tgbotapi.NewMessage(fromID, msg))

		if isSuccess {
			bot.Send(tgbotapi.NewMessage(workerID, fmt.Sprintf("–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %d üåü!", amount)))
		}

		// –°–±—Ä–∞—Å—ã–≤–∞–µ–º tmp_field –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Ç.–∫. –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
		// –≠—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é.
		_, err = db.Exec(`UPDATE users SET tmp_field='' WHERE telegram_id=?`, fromID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ tmp_field –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ %d: %v", fromID, err)
		}
		answerCallback(bot, callback.ID, "–ì–æ—Ç–æ–≤–æ!")
		return

	// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–æ—Å—Ç—É–ø —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω) ---
	case strings.HasPrefix(data, "topup_select_worker:"):
		parts := strings.Split(data, ":")

		if len(parts) >= 2 && parts[0] == "topup_select_worker" {
			if len(parts) == 2 {
				// üëâ –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
				workerID, err := strconv.ParseInt(parts[1], 10, 64)
				if err != nil {
					bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞."))
					answerCallback(bot, callback.ID, "")
					return
				}

				workerInfo := database.GetWorkerInfo(db, workerID)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ (ID %d): %v", workerID, err)
					bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–Ω–∏–∫–µ."))
					answerCallback(bot, callback.ID, "")
					return
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã, –≤–∫–ª—é—á–∞—è workerID –≤ callback-–¥–∞–Ω–Ω—ã–µ
				replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("1üåü", fmt.Sprintf("topup_amount:1:%d", workerID)),
						tgbotapi.NewInlineKeyboardButtonData("2üåü", fmt.Sprintf("topup_amount:2:%d", workerID)),
					),
				)

				msg := tgbotapi.NewMessage(fromID, fmt.Sprintf("%s\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", workerInfo))
				msg.ReplyMarkup = replyMarkup

				bot.Send(msg)
				answerCallback(bot, callback.ID, "")
				return

			} else if len(parts) == 4 {
				// üëâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü)
				page, err := strconv.Atoi(parts[1])
				if err != nil {
					bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã."))
					answerCallback(bot, callback.ID, "")
					return
				}
				status := parts[2]
				dep := parts[3]

				err = database.SendWorkersList(bot, db, fromID, status, dep, page)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ (page %d, dep %s): %v", page, dep, err)
					bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–∏ —Å–ø–∏—Å–∫–∞."))
				}
				answerCallback(bot, callback.ID, "")
				return
			}
		}
		bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞."))
		answerCallback(bot, callback.ID, "")
		return
	}

	// –ï—Å–ª–∏ data –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –Ω–∏ –ø–æ–¥ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –≤—ã—à–µ
	answerCallback(bot, callback.ID, "")
}
