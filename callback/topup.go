package callback

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"strconv"
	"strings"
	"tbViT/database"
)

func handleTopUpCallback(
	bot *tgbotapi.BotAPI,
	db *sql.DB,
	fromID int64,
	data string,
	callback *tgbotapi.CallbackQuery,
) {
	switch {
	case data == "topup_":
		dep, err := database.GetUserDep(db, fromID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è."))
			return
		}
		database.SendWorkersList(bot, db, fromID, "topup_select_worker", dep, 0)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "topup_amount:"):
		amountStr := strings.TrimPrefix(data, "topup_amount:")
		amount, err := strconv.Atoi(amountStr)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."))
			return
		}
		// –ü–æ–ª—É—á–∞–µ–º workerID –∏–∑ tmp_field –º–µ–Ω–µ–¥–∂–µ—Ä–∞
		var workerID int64
		err = db.QueryRow(`SELECT tmp_field FROM users WHERE telegram_id=?`, fromID).Scan(&workerID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞: —Ä–∞–±–æ—Ç–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω."))
			return
		}

		msg, isTrue, _ := database.TopUpBalance(db, workerID, amount)
		bot.Send(tgbotapi.NewMessage(fromID, msg))
		if isTrue {
			bot.Send(tgbotapi.NewMessage(workerID, fmt.Sprintf("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ %d üåü!", amount)))
		}
		db.Exec(`UPDATE users SET tmp_field='' WHERE telegram_id=?`, fromID)
		answerCallback(bot, callback.ID, "–ì–æ—Ç–æ–≤–æ!")
		return

	case strings.HasPrefix(data, "topup_select_worker:") && (accessLevel == "admin" || accessLevel == "manager"):
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç callbackData
		// –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
		// - "select_worker:{workerID}"         ‚Äî –≤—ã–±–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
		// - "select_worker:{page}:{status}:{dep}" ‚Äî –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ

		parts := strings.Split(data, ":")
		if len(parts) == 2 {
			// üëâ –í—ã–±–æ—Ä —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
			workerID, err := strconv.ParseInt(parts[1], 10, 64)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ ID —Ä–∞–±–æ—Ç–Ω–∏–∫–∞."))
				answerCallback(bot, callback.ID, "")
				return
			}
			db.Exec(`UPDATE users SET tmp_field=? WHERE telegram_id=?`, workerID, fromID)
			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã
			replyMarkup := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("1üåü", "topup_amount:1"),
					tgbotapi.NewInlineKeyboardButtonData("2üåü", "topup_amount:2"),
				),
			)
			info := fmt.Sprintf(database.GetWorkerInfo(db, workerID) + "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:")
			msg := tgbotapi.NewMessage(fromID, info)
			msg.ReplyMarkup = replyMarkup
			bot.Send(msg)
			answerCallback(bot, callback.ID, "")
			return
		} else if len(parts) == 4 {
			// –ü–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü
			// –§–æ—Ä–º–∞—Ç: select_worker:{page}:{status}:{dep}
			page, err := strconv.Atoi(parts[1])
			if err != nil {
				bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."))
				answerCallback(bot, callback.ID, "")
				return
			}
			status := parts[2]
			dep := parts[3]
			err = database.SendWorkersList(bot, db, fromID, status, dep, page)
			if err != nil {
				bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤."))
			}
			answerCallback(bot, callback.ID, "")
			return
		} else {
			// –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞."))
			answerCallback(bot, callback.ID, "")
			return
		}
	}

	// –ï—Å–ª–∏ data –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
	bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."))
	answerCallback(bot, callback.ID, "")
}
