package callback

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"tbViT/database"
)

func handleBuyCallback(bot *tgbotapi.BotAPI, db *sql.DB, cq *tgbotapi.CallbackQuery) {
	buyerID := cq.From.ID
	productID, err := database.ParseProductID(cq.Data)
	if err != nil {
		return
	}
	price, remains, productName, restNum, _ := database.GetPriceRemainsProductName(db, productID)

	ok, err := database.IsSameRest(db, buyerID, productID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è"))
		answerCallback(bot, cq.ID, "")
		return
	}
	if !ok {
		bot.Send(tgbotapi.NewMessage(buyerID, "‚õî –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è!"))
		answerCallback(bot, cq.ID, "")
		return
	}
	if remains < 1 {
		bot.Send(tgbotapi.NewMessage(buyerID, "‚ùó –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!"))
		answerCallback(bot, cq.ID, "")
		return
	}

	// --- –¢–†–ê–ù–ó–ê–ö–¶–ò–Ø ---
	tx, err := db.Begin()
	if err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."))
		answerCallback(bot, cq.ID, "")
		return
	}
	defer func() {
		if err != nil {
			tx.Rollback()
		}
	}()
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
	var balance int
	err = tx.QueryRow(`SELECT current_balance FROM users WHERE telegram_id=?`, buyerID).Scan(&balance)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è %d: %s", buyerID, err)
		bot.Send(tgbotapi.NewMessage(buyerID, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–ª–∞–Ω—Å–∞."))
		answerCallback(bot, cq.ID, "")
		return
	}
	if balance < price {
		bot.Send(tgbotapi.NewMessage(buyerID, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!"))
		answerCallback(bot, cq.ID, "")
		return
	}
	// –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
	_, err = tx.Exec(`UPDATE users SET current_balance = current_balance - ? WHERE telegram_id=?`, price, buyerID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ."))
		answerCallback(bot, cq.ID, "")
		return
	}

	// –£–º–µ–Ω—å—à–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞
	_, err = tx.Exec(`UPDATE shop SET remains = remains - 1 WHERE id=? AND remains > 0`, productID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–ª–∞–¥–∞."))
		answerCallback(bot, cq.ID, "")
		return
	}
	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ orders
	_, err = tx.Exec(`
  INSERT INTO orders (telegram_id, product_name, product_id, status, rest_number, price) VALUES (?, ?, ?, ?, ?, ?)`,
		buyerID, productName, productID, "–≤ —Å–±–æ—Ä–∫–µ", restNum, price,
	)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞."))
		answerCallback(bot, cq.ID, "")
		tx.Rollback()
		return
	}
	// --- –ö–û–ú–ú–ò–¢ ---
	if err = tx.Commit(); err != nil {
		bot.Send(tgbotapi.NewMessage(buyerID, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."))
		answerCallback(bot, cq.ID, "")
		return
	}

	shopAdmin, err := database.GetAdminID(db, buyerID)

	adminMsg := fmt.Sprintf(
		"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: %d\n–¢–æ–≤–∞—Ä: %s\n–°—Ç–∞—Ç—É—Å: –í —Å–±–æ—Ä–∫–µ\n\n–ß—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–∫–∞–∑—ã¬ª.",
		buyerID, productName,
	)
	buyerMsg := fmt.Sprintf(
		"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n–í—ã –ø—Ä–µ–æ–±—Ä–µ–ª–∏: %s.\n–ü–æ–∑–∂–µ, –∫–æ–≥–¥–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑.",
		productName,
	)
	bot.Send(tgbotapi.NewMessage(shopAdmin, adminMsg))
	bot.Send(tgbotapi.NewMessage(buyerID, buyerMsg))
}
