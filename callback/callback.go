package callback

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"strconv"
	"strings"
	"tbViT/database"
	"tbViT/features"
)

type CorrectionState struct {
	ID    int64
	Field string // // –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
	Value string
}

var accessLevel string

func HandleCallback(bot *tgbotapi.BotAPI, db *sql.DB, callback *tgbotapi.CallbackQuery, userState map[int64]*CorrectionState, shopState map[int64]*CorrectionState) {
	fromID := callback.From.ID
	data := callback.Data

	adminTelegramID, err := database.GetAdminID(db, fromID)
	if err != nil {
		log.Println(err)
	}

	accessLevel, err = database.GetAccessLevel(db, fromID)
	if err != nil {
		log.Println(err)
	}

	log.Printf("Callback data: %s, user: %d, level: %s", data, fromID, accessLevel)

	switch {
	case strings.HasPrefix(data, "approve:") && accessLevel == "admin":
		parts := strings.Split(data, ":")
		if len(parts) == 3 {
			role := parts[1]
			uid, _ := strconv.ParseInt(parts[2], 10, 64)
			db.Exec(`UPDATE users SET access_level=?, verified=1, current_balance=0, last_ts=0 WHERE telegram_id=?`, role, uid)
			bot.Send(tgbotapi.NewMessage(uid, fmt.Sprintf("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–∞—à —Å—Ç–∞—Ç—É—Å: %s.\n/menu ‚Äî –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.", role)))
			answerCallback(bot, callback.ID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–Ω—è—Ç.")
			return
		}

	case strings.HasPrefix(data, "reject:") && accessLevel == "admin":
		parts := strings.Split(data, ":")
		if len(parts) == 2 {
			uid, _ := strconv.ParseInt(parts[1], 10, 64)
			db.Exec(`UPDATE users SET verified=0, access_level='' WHERE telegram_id=?`, uid)
			bot.Send(tgbotapi.NewMessage(uid, "‚ùå –í–∞—à–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."))
			bot.Send(tgbotapi.NewMessage(adminTelegramID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—ë–Ω."))
			answerCallback(bot, callback.ID, "–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
			return
		}

	case data == "menu_admin_setbal" && accessLevel == "admin":
		dep, err := database.GetUserDep(db, fromID)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è."))
			return
		}
		database.SendWorkersList(bot, db, fromID, "correction", dep, 0)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "correction:") && accessLevel == "admin":
		parts := strings.Split(data, ":")
		if len(parts) != 2 {
			return
		}
		workerID, err := strconv.ParseInt(parts[1], 10, 64)
		if err != nil {
			return
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º workerID, –Ω–æ –ø–æ–ª–µ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ
		userState[fromID] = &CorrectionState{ID: workerID}
		info := database.GetWorkerInfo(db, workerID)
		message := fmt.Sprintf("%s\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?", info)
		msg := tgbotapi.NewMessage(fromID, message)
		// –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
		msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ë–∞–ª–∞–Ω—Å", "setfield:balance"),
				tgbotapi.NewInlineKeyboardButtonData("–ò–º—è", "setfield:name"),
				tgbotapi.NewInlineKeyboardButtonData("–ù–æ–º–µ—Ä", "setfield:tablenumber"),
				tgbotapi.NewInlineKeyboardButtonData("‚ùóÔ∏è–£–¥–∞–ª–∏—Ç—å‚ùóÔ∏è", "setfield:delete"),
			),
		)
		bot.Send(msg)
		answerCallback(bot, callback.ID, "")
		return

	case data == "accesslevel" && accessLevel == "admin":
		roleMarkup := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–†–∞–±–æ—Ç–Ω–∏–∫", "changeRole:worker"),
				tgbotapi.NewInlineKeyboardButtonData("–ú–µ–Ω–µ–¥–∂–µ—Ä", "changeRole:manager"),
				tgbotapi.NewInlineKeyboardButtonData("–ê–¥–º–∏–Ω", "changeRole:admin"),
			),
		)
		msg := tgbotapi.NewMessage(fromID, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å:")
		msg.ReplyMarkup = roleMarkup
		bot.Send(msg)

	case strings.HasPrefix(data, "changeRole:") && accessLevel == "admin":
		role := strings.TrimPrefix(data, "changeRole:")
		userState[fromID] = &CorrectionState{
			Field: "wait_table_number",
			Value: role,
		}
		bot.Send(tgbotapi.NewMessage(fromID, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞:"))
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "confirmAdmin:") && accessLevel == "admin":
		tableNumber := strings.TrimPrefix(data, "confirmAdmin:")
		_, ok := userState[fromID]
		if !ok {
			bot.Send(tgbotapi.NewMessage(fromID, "‚õî –û—à–∏–±–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."))
			answerCallback(bot, callback.ID, "")
			return
		}
		role := "admin"
		err := database.ChangeRole(db, fromID, tableNumber, role)
		if err != nil {
			bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞: "+err.Error()))
		} else {
			bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ ‚Äî –∞–¥–º–∏–Ω. –í—ã —Å—Ç–∞–ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."))
		}
		delete(userState, fromID)
		answerCallback(bot, callback.ID, "")
		return

	case data == "cancelAdmin" && accessLevel == "admin":
		bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!"))
		delete(userState, fromID)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "setfield:") && accessLevel == "admin":
		parts := strings.Split(data, ":")
		if len(parts) != 2 {
			return
		}
		field := parts[1]
		state, ok := userState[fromID]
		if !ok {
			return
		}
		if field == "delete" {
			// –£–¥–∞–ª—è–µ–º –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø, ID –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ state.ID
			err := database.DeleteUser(db, state.ID) // ‚Üê –ø–µ—Ä–µ–¥–∞—ë–º db –∏ workerID
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", state.ID, err)
				bot.Send(tgbotapi.NewMessage(fromID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."))
			} else {
				bot.Send(tgbotapi.NewMessage(fromID, "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω."))
			}
			delete(userState, fromID)
			answerCallback(bot, callback.ID, "")
			return
		}

		messege := fmt.Sprintf("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ(%s):", field)
		state.Field = field // —Ç–µ–ø–µ—Ä—å –ø–æ–º–Ω–∏–º –∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞, –∏ –ø–æ–ª–µ
		bot.Send(tgbotapi.NewMessage(fromID, messege))
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "shop_edit") && accessLevel == "admin":
		handleShopEdit(bot, db, callback, shopState)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "orders") && accessLevel == "admin":
		handleOrderComplete(bot, db, callback)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "topup_") && (accessLevel == "admin" || accessLevel == "manager"):
		handleTopupCallback(bot, db, fromID, data, callback)
		answerCallback(bot, callback.ID, "")
		return

	case data == "menu_list" && (accessLevel == "admin" || accessLevel == "manager"):
		list, err := database.SendWorkersString(db, fromID)
		msg := fmt.Sprintf("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n%s", list)
		if err != nil {
			msg = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞"
		}
		bot.Send(tgbotapi.NewMessage(fromID, msg))
		answerCallback(bot, callback.ID, "")
		return

	case data == "show_balance" && accessLevel == "worker":
		balance, err := database.GetBalance(db, fromID)
		msg := ""
		if err != nil {
			msg = "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!"
		} else {
			msg = fmt.Sprintf("–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: %düåü", balance)
		}
		bot.Send(tgbotapi.NewMessage(fromID, msg))
		answerCallback(bot, callback.ID, "")
		return

	case data == "menu_market" && accessLevel == "worker":
		features.ShowShop(bot, db, callback.Message.Chat.ID, fromID)
		answerCallback(bot, callback.ID, "")
		return

	case strings.HasPrefix(data, "buy_product:") && accessLevel == "worker":
		handleBuyCallback(bot, db, callback)
		answerCallback(bot, callback.ID, "–ü–æ–∫—É–ø–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")
		return

	case data == "history_orders" && accessLevel == "worker":
		list, err := database.SendHistoryOrders(db, fromID)
		msg := fmt.Sprintf("–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤:\n%s", list)
		if err != nil {
			msg = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"
		}
		bot.Send(tgbotapi.NewMessage(fromID, msg))
		answerCallback(bot, callback.ID, "")
		return

	default:
		bot.Send(tgbotapi.NewMessage(fromID, fmt.Sprintf("‚õî –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –í–∞—à —É—Ä–æ–≤–µ–Ω—å: %s", accessLevel)))
		answerCallback(bot, callback.ID, "")
		return
	}

}

func answerCallback(bot *tgbotapi.BotAPI, callbackID, text string) {
	cb := tgbotapi.NewCallback(callbackID, text)
	if _, err := bot.Request(cb); err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ callback:", err)
	}
}
