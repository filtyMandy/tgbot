package features

import (
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"tbViT/database"
)

var SentMessages = make(map[int64][]int)

func ShowShop(bot *tgbotapi.BotAPI, db *sql.DB, chatID int64, userID int64) {
	restID, _ := database.GetUserRestID(db, userID)
	rows, err := db.Query(`SELECT id, product, price, remains FROM shop WHERE remains > 0 AND rest_number=?`, restID)
	if err != nil {
		bot.Send(tgbotapi.NewMessage(chatID, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–∞–≥–∞–∑–∏–Ω–∞"))
		return
	}
	defer rows.Close()
	var kbRows [][]tgbotapi.InlineKeyboardButton
	text := "üõí –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:\n"
	for rows.Next() {
		var id int
		var product string
		var price, remains int
		rows.Scan(&id, &product, &price, &remains)
		text += fmt.Sprintf("‚Ä¢ %s ‚Äî %düåü (%d —à—Ç.)\n", product, price, remains)
		btn := tgbotapi.NewInlineKeyboardButtonData(
			fmt.Sprintf("–ö—É–ø–∏—Ç—å %s (%düåü)", product, price),
			fmt.Sprintf("buy_product:%d", id),
		)
		kbRows = append(kbRows, tgbotapi.NewInlineKeyboardRow(btn))
	}
	if len(kbRows) == 0 {
		text = "üòî –¢–æ–≤–∞—Ä—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å!"
	}
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(kbRows...)
	bot.Send(msg)
}

func ShowShopEdit(bot *tgbotapi.BotAPI, adminID int64) {
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä", "shop_edit:choose"),
			tgbotapi.NewInlineKeyboardButtonData("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "shop_edit:shop_add"),
		),
	)
	msg := tgbotapi.NewMessage(adminID, "–ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω–∞:")
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

func ShowOrders(bot *tgbotapi.BotAPI, db *sql.DB, fromID int64) {
	buttons, _ := database.KeyboardOrders(db, fromID)
	msg := tgbotapi.NewMessage(fromID, "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
	msg.ReplyMarkup = buttons
	if len(buttons.InlineKeyboard) == 0 {
		msg = tgbotapi.NewMessage(fromID, "–í –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–∫–∞–∑—ã")
	}
	bot.Send(msg)
}

func AcceptOrders(bot *tgbotapi.BotAPI, db *sql.DB, fromID int64, orderID int) {
	accept := fmt.Sprintf("orders_order:%d:accept", orderID)
	deny := fmt.Sprintf("orders_order:%d:deny", orderID)
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å", accept),
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", deny),
		),
	)
	num, name, product, price, err := database.GetOrderInfo(db, orderID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ: %v", err)
	}
	text := fmt.Sprintf("–ó–∞–∫–∞–∑:\n%s %s\n%s %düåü", num, name, product, price)
	msg := tgbotapi.NewMessage(fromID, text)
	msg.ReplyMarkup = buttons
	bot.Send(msg)
}

func CompliteOrders(bot *tgbotapi.BotAPI, db *sql.DB, fromID int64, orderID int, decision string) {
	if decision == "accept" {
		buyerID, product := database.CompleteOrder(db, orderID, decision)
		if product == "complite" {
			msgAdmin := tgbotapi.NewMessage(fromID, "–ó–∞–∫–∞–∑ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω! ‚õîÔ∏è")
			bot.Send(msgAdmin)
		} else {
			msgBuyer := fmt.Sprintf("–ó–∞–∫–∞–∑ (%s) –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –æ—Ñ–∏—Å.\n–ú–æ–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å.", product)
			msg := tgbotapi.NewMessage(buyerID, msgBuyer)
			msgAdmin := tgbotapi.NewMessage(fromID, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞.‚úÖ")
			bot.Send(msg)
			bot.Send(msgAdmin)
		}
	}
	if decision == "deny" {
		buyerID, product := database.CompleteOrder(db, orderID, decision)
		msgBuyer := fmt.Sprintf("–ó–∞–∫–∞–∑–∞ (%s) –æ—Ç–º–µ–Ω–µ–Ω.\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –º–∞–≥–∞–∑–∏–Ω–∞.", product)
		msg := tgbotapi.NewMessage(buyerID, msgBuyer)
		bot.Send(msg)
		msgAdmin := tgbotapi.NewMessage(fromID, "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞.‚ùå")
		bot.Send(msgAdmin)
	}
}

func DeleteAllBotMessages(bot *tgbotapi.BotAPI, chatID int64) {
	for _, mID := range SentMessages[chatID] {
		del := tgbotapi.DeleteMessageConfig{
			ChatID:    chatID,
			MessageID: mID,
		}
		_, err := bot.Request(del)
		log.Printf("deleteMessage chat=%d msg=%d err=%v", chatID, mID, err)
	}
	SentMessages[chatID] = nil
}
